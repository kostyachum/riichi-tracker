name: Build and Deploy to Droplet

on:
  push:
    branches: [ main ]

permissions:
  contents: read

env:
  APP_NAME: riichi-tracker

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build \
            -t "$APP_NAME:${{ github.sha }}" \
            -t "$APP_NAME:latest" \
            .

      - name: Save image as tarball
        run: |
          docker save "$APP_NAME:${{ github.sha }}" | gzip > image.tar.gz

      - name: Load SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add droplet to known_hosts
        env:
          SSH_HOST: ${{ secrets.DROPLET_HOST }}
          SSH_PORT: ${{ secrets.DROPLET_PORT != '' && secrets.DROPLET_PORT || '22' }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "$SSH_PORT" "$SSH_HOST" >> ~/.ssh/known_hosts

      - name: Create remote app directory
        env:
          SSH_HOST: ${{ secrets.DROPLET_HOST }}
          SSH_USER: ${{ secrets.DROPLET_USER }}
          SSH_PORT: ${{ secrets.DROPLET_PORT != '' && secrets.DROPLET_PORT || '22' }}
        run: |
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" \
            'set -euo pipefail; REMOTE_DIR=~/apps/riichi-tracker; mkdir -p "$REMOTE_DIR/db"'

      - name: Upload image to droplet
        env:
          SSH_HOST: ${{ secrets.DROPLET_HOST }}
          SSH_USER: ${{ secrets.DROPLET_USER }}
          SSH_PORT: ${{ secrets.DROPLET_PORT != '' && secrets.DROPLET_PORT || '22' }}
        run: |
          scp -P "$SSH_PORT" image.tar.gz "$SSH_USER@$SSH_HOST:~/apps/riichi-tracker/image.tar.gz"

      - name: Load image on droplet
        env:
          SSH_HOST: ${{ secrets.DROPLET_HOST }}
          SSH_USER: ${{ secrets.DROPLET_USER }}
          SSH_PORT: ${{ secrets.DROPLET_PORT != '' && secrets.DROPLET_PORT || '22' }}
          APP_TAG: ${{ github.sha }}
        run: |
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" \
            'set -euo pipefail; \
             REMOTE_DIR=~/apps/riichi-tracker; \
             docker load -i "$REMOTE_DIR/image.tar.gz"; \
             rm -f "$REMOTE_DIR/image.tar.gz"'

      - name: Run migrations
        env:
          SSH_HOST: ${{ secrets.DROPLET_HOST }}
          SSH_USER: ${{ secrets.DROPLET_USER }}
          SSH_PORT: ${{ secrets.DROPLET_PORT != '' && secrets.DROPLET_PORT || '22' }}
          APP_TAG: ${{ github.sha }}
        run: |
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" \
            'set -euo pipefail; \
             REMOTE_DIR=~/apps/riichi-tracker; \
             docker run --rm --name riichi-tracker-migrate \
               --env-file "$REMOTE_DIR/.env" \
               -v "$REMOTE_DIR/db/db.sqlite3:/app/db/db.sqlite3" \
               riichi-tracker:'"$APP_TAG"' \
               python manage.py migrate'

      - name: Restart application container
        env:
          SSH_HOST: ${{ secrets.DROPLET_HOST }}
          SSH_USER: ${{ secrets.DROPLET_USER }}
          SSH_PORT: ${{ secrets.DROPLET_PORT != '' && secrets.DROPLET_PORT || '22' }}
          APP_TAG: ${{ github.sha }}
        run: |
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" \
            'set -euo pipefail; \
             REMOTE_DIR=~/apps/riichi-tracker; \
             docker rm -f riichi-tracker >/dev/null 2>&1 || true; \
             docker run -d --name riichi-tracker \
               --env-file "$REMOTE_DIR/.env" \
               --restart unless-stopped \
               -p 8000:8000 \
               -v "$REMOTE_DIR/db/db.sqlite3:/app/db/db.sqlite3" \
               riichi-tracker:'"$APP_TAG"' '
